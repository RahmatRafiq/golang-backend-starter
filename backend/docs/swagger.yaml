definitions:
  controllers.AssignPermissionsRequest:
    properties:
      permissions:
        items:
          type: integer
        type: array
    type: object
  helpers.Params:
    properties:
      data:
        items: {}
        type: array
      item: {}
      message:
        type: string
      token:
        type: string
    type: object
  models.Category:
    properties:
      category:
        type: string
      created_at:
        type: string
      id:
        type: integer
      updated_at:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.Permission:
    properties:
      id:
        type: integer
      permission:
        type: string
    type: object
  models.Product:
    properties:
      category_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      images:
        description: Assume JSON stored as string
        type: string
      margin:
        type: number
      name:
        type: string
      price:
        type: number
      reference:
        type: string
      sold:
        type: integer
      stock:
        type: integer
      store_id:
        type: integer
      updated_at:
        type: string
    type: object
  models.Role:
    properties:
      id:
        type: integer
      role:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.Store:
    properties:
      address:
        type: string
      city:
        type: string
      country:
        type: string
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      state:
        type: string
      updated_at:
        type: string
      zip:
        type: string
    type: object
  models.User:
    properties:
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      pin:
        type: string
      reference:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: Hello World
          schema:
            type: string
      summary: Show a hello world message
      tags:
      - root
  /auth/login:
    post:
      consumes:
      - application/json
      description: API untuk login dengan email dan password
      parameters:
      - description: Login data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token yang dihasilkan
          schema:
            $ref: '#/definitions/helpers.Params'
        "400":
          description: Kesalahan dalam input data
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Email atau password salah
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: API untuk logout, membutuhkan token yang valid
      parameters:
      - description: Token Bearer
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Berhasil logout
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Token tidak disediakan
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Token tidak valid atau pengguna tidak ditemukan
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Logout
      tags:
      - Auth
  /categories:
    get:
      description: Mengambil daftar semua kategori
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: List all categories
      tags:
      - categories
    put:
      description: Membuat atau mengedit kategori
      parameters:
      - description: Category Data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Create or edit a category
      tags:
      - categories
  /categories/{id}:
    delete:
      description: Menghapus kategori berdasarkan ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Category deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Category not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Delete a category by ID
      tags:
      - categories
    get:
      description: Mengambil satu kategori berdasarkan ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "404":
          description: Category not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get a category by ID
      tags:
      - categories
  /permissions:
    get:
      description: Mengambil daftar semua permission
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Permission'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: List all permissions
      tags:
      - permissions
    put:
      description: Membuat atau mengedit permission
      parameters:
      - description: Permission Data
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/models.Permission'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Permission'
      security:
      - Bearer: []
      summary: Create or edit a permission
      tags:
      - permissions
  /permissions/{id}:
    delete:
      description: Menghapus permission berdasarkan ID
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Permission deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Permission not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Delete a permission by ID
      tags:
      - permissions
    get:
      description: Mengambil satu permission berdasarkan ID
      parameters:
      - description: Permission ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Permission'
        "404":
          description: Permission not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get a permission by ID
      tags:
      - permissions
  /products:
    get:
      description: Mengambil daftar semua produk
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Product'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: List all products
      tags:
      - products
    put:
      description: Membuat atau mengedit produk
      parameters:
      - description: Product Data
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/models.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Product not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Create or edit a product
      tags:
      - products
  /products/{id}:
    delete:
      description: Menghapus produk berdasarkan ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Product not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Delete a product by ID
      tags:
      - products
    get:
      description: Mengambil satu produk berdasarkan ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Product'
        "404":
          description: Product not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get a product by ID
      tags:
      - products
  /roles:
    get:
      description: Mengambil daftar semua role
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Role'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: List all roles
      tags:
      - roles
    put:
      description: Membuat atau mengedit role
      parameters:
      - description: Role Data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/models.Role'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
      security:
      - Bearer: []
      summary: Create or edit a role
      tags:
      - roles
  /roles/{id}:
    delete:
      description: Menghapus role berdasarkan ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Role not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Delete a role by ID
      tags:
      - roles
    get:
      description: Mengambil satu role berdasarkan ID
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Role'
        "404":
          description: Role not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get a role by ID
      tags:
      - roles
  /roles/{id}/permissions:
    get:
      description: Mengambil permission yang ditetapkan ke role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Permission'
            type: array
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get permissions assigned to a role
      tags:
      - roles
    post:
      description: Menetapkan permission ke role
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: Permission IDs
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.AssignPermissionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Permissions assigned to role
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Assign permissions to a role
      tags:
      - roles
  /stores:
    get:
      description: Mengambil daftar semua toko
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Store'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: List all stores
      tags:
      - stores
    post:
      description: Membuat atau mengedit toko
      parameters:
      - description: Store Data
        in: body
        name: store
        required: true
        schema:
          $ref: '#/definitions/models.Store'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Store'
      security:
      - Bearer: []
      summary: Create or edit a store
      tags:
      - stores
  /stores/{id}:
    delete:
      description: Menghapus toko berdasarkan ID
      parameters:
      - description: Store ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Store deleted
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Store not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Delete a store by ID
      tags:
      - stores
    get:
      description: Mengambil satu toko berdasarkan ID
      parameters:
      - description: Store ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Store'
        "404":
          description: Store not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Get a store by ID
      tags:
      - stores
  /users:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      summary: Show all users
      tags:
      - users
    put:
      consumes:
      - application/json
      parameters:
      - description: User object
        in: body
        name: JSON
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
      summary: Upsert a user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: User deleted
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Show a user
      tags:
      - users
swagger: "2.0"
